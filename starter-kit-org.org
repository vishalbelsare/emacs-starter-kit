#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Org

Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** Org-Mode hooks
*** Keybindings

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\C-n" 'outline-next-visible-heading)
              (local-set-key "\C-p" 'outline-previous-visible-heading)
              ;; (local-set-key "\C-u" 'outline-up-heading)
              ;; table
              (local-set-key "\M-\C-w" 'org-table-copy-region)
              (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
              (local-set-key "\M-\C-l" 'org-table-sort-lines)
              ;; display images
              (local-set-key "\M-I" 'org-toggle-inline-image)
              ;; Kill jupyter notebooks
              (local-set-key (kbd "C-c C-v k") 'jupyter-repl-restart-kernel)
              ))
#+END_SRC

*** Minor mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda ()
              (yas-minor-mode -1)
              (org-indent-mode  t)
              (org-bullets-mode t)
              (auto-complete-mode t)
              ;; (linum-mode -1)
              (hl-line-mode t)
              ;;(set-input-method "TeX")
              (delight 'org-indent-mode nil "org-indent")
              ))
#+END_SRC

** Org-Mode keybindings
*** =ox-latex=
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (define-key org-mode-map (kbd "s-p") 'org-latex-export-to-pdf)
  (define-key org-mode-map (kbd "s-l") 'org-latex-export-to-latex)
  (define-key org-mode-map (kbd "s-h") 'org-html-export-to-html)
#+END_SRC
*** =ox-beamer=
#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
  (define-key org-beamer-mode-map (kbd "s-p") 'org-beamer-export-to-pdf)
  (define-key org-beamer-mode-map (kbd "s-l") 'org-beamer-export-to-latex)
#+END_SRC
*** Source block
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map "\C-x\C-a" 'org-babel-mark-block)
#+END_SRC

** Org-Mode settings
*** Setting org timestamp directory
#+BEGIN_SRC emacs-lisp
  (setq org-publish-timestamp-directory (concat temporary-file-directory "org-timestamps"))
#+END_SRC

*** Ellipsis
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "⤵"
        org-columns-ellipses "…")
#+END_SRC

*** Using ido completing
#+BEGIN_SRC emacs-lisp
  (setq org-completion-use-ido t)
#+END_SRC

*** Use speed keys
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the =org-speed-commands-default= variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to =org-babel-describe-bindings=) will
display a list of the code blocks commands and their related keys.

#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-use-speed-commands t)
#+END_SRC
*** Easy templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist '("al" "#+BEGIN_SRC latex\n\\begin{align*}\n?\\end{align*}\n#+END_SRC"))
#+END_SRC

*** Special word faces
#+BEGIN_SRC emacs-lisp :tangle no
  (defface my/highlight-face
    '((t (:weight normal :slant normal :box '(:line-width 1 :color "#CC0000")
                  :foreground "#CC0000" :background "#FFFF88")))
    "Face for making FIXME and other warnings stand out.")

  (defvar my/highlight-org-regexps
    "\\(FIXME\\|BUG\\|XXX\\|[Ee]rror\\|[Ww]arning\\|WARNING\\)"
    "Patterns to highlight (for Org mode only, to ensure no conflict with the
    Org mode TODO keyword).")

  ;; set up highlighting of special patterns for Org mode only
  (dolist (mode '(org-mode
                  orgtbl-mode))
    (font-lock-add-keywords mode
                            `((,my/highlight-org-regexps 1 'my/highlight-face
                                                         prepend))))
#+END_SRC
*** Turn on automatic renumbering of footnotes
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-auto-adjust t)
#+END_SRC
*** Random footnote label
#+BEGIN_SRC emacs-lisp
  (setq org-footnote-auto-label 'random)
#+END_SRC

*** Make export asynchronous
#+BEGIN_SRC emacs-lisp
  (setq org-export-in-background t)
  (setq org-export-async-debug t)
#+END_SRC

*** Hide =org= emphasis symbol
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

** Add =org= contrib to =load-path=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/Development/orgmode.org/org-mode/contrib/lisp")
#+END_SRC
** org-app
#+BEGIN_SRC emacs-lisp
  (setq org-file-apps
        (quote
         (("\\.pdf\\'" . "evince %s")
          (auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . default))))
#+END_SRC
** Code blocks
This activates a number of widely used languages, you are encouraged to activate
more languages using the customize interface for the =org-babel-load-languages=
variable, or with an elisp form like the one below.  The customize interface of
=org-babel-load-languages= contains an up to date list of the currently
supported languages.
*** Supported languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (awk . t)
     (C . t)
     (python . t)
     (jupyter . t)
     (latex . t)
     (gnuplot . t)))
#+END_SRC

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

*** Fontification
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code. It also changes the behavior of
TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+END_SRC

*** Code progression
A progress indicator for code blocks in org-mode courtesy
of [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg01000.html][John Kitchin]]

#+BEGIN_SRC emacs-lisp
  (defadvice org-babel-execute-src-block (around progress nil activate)
    ;; (set-face-attribute
    ;;  'org-block-background nil :background "LightSteelBlue")
    (message "Running your code block")
    ad-do-it
    ;; (set-face-attribute 'org-block-background nil :background "gray")
    (message "Done with code block"))
#+END_SRC

*** Narrowing code block
Stolen from [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html]]

#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
    Intelligently means: region, org-src-block, org-subtree, or defun,
    whichever applies first.
    Narrowing to org-src-block actually calls `org-edit-src-code'.

    With prefix P, don't widen, just narrow even if buffer is already
    narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning) (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing command.
           ;; Remove this first conditional if you don't want it.
           (cond ((ignore-errors (org-edit-src-code))
                  (delete-other-windows))
                 ((org-at-block-p)
                  (org-narrow-to-block))
                 (t (org-narrow-to-subtree))))
          (t (narrow-to-defun))))

  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key org-mode-map "\C-x\C-n" #'narrow-or-widen-dwim)
#+END_SRC

*** Export =jupyter-python= to jupyter notebooks format
From http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/
#+BEGIN_SRC emacs-lisp
  (require 'ox-ipynb)
#+END_SRC

*** Display/update images in the buffer after code block evaluation
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

** The Library of Babel
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the =org-babel-lob-ingest= function.
#+BEGIN_SRC emacs-lisp
  (org-babel-lob-ingest (expand-file-name "starter-kit-org.org" starter-kit-dir))
#+END_SRC

*** Starter-kit library

First of all, I do not want to wrap raw output with =begin/end_example=
block. For some obscure reasons, =org-babel-examplify-region= is called and thus
wrap the result output. To avoid such wrapping, I set the minimal number of
lines of code above which the code is wrapped to =nil=
#+BEGIN_SRC emacs-lisp
  ;;(setq org-babel-min-lines-for-block-output 0)
#+END_SRC

The following lines provide several "useful" functions. To use them, do
#+BEGIN_SRC org
  ,#+CALL: function_name(var1="...", var2="...")
#+END_SRC

**** Generate =org= containing one figure per header

#+NAME: org-figure-to-slide
#+HEADERS: :var title="Empty title"
#+HEADERS: :var dir="./figures" :var ext="*.pdf"
#+HEADERS: :var width="\linewidth" :var options=""
#+BEGIN_SRC shell :results raw :exports none
  if [ ! -d ${dir} ]; then
      echo "${dir} is not a directory !"
      exit 1
  fi
  for i in ${dir}/${ext}; do
      echo "* ${title}"
      if [ ! -z ${options} ]; then
          echo ":PROPERTIES:"
          echo ${options}
          echo ":END:"
      fi
      echo "#+BEGIN_CENTER"
      echo "#+ATTR_LATEX: :width ${width}"
      echo "[[file:${i}]]"
      echo "#+END_CENTER"
  done
#+END_SRC

** LaTeX hacks
*** Highlight LaTeX fragments
#+BEGIN_SRC emacs-lisp
  (setq org-highlight-latex-and-related '(latex))
#+END_SRC
*** VC status
#+NAME: vc-status
#+BEGIN_SRC sh :exports none
  if [ -d .svn ]; then
    status=$(LC_MESSAGES=en svn info)
    rev=$(echo -e $status | sed -n 's/.*Revision: *\([^ ]*\).*/\1/p')
    date=$(echo -e $status | sed -n 's/.*Last Changed Date: *\([^ ]*\).*/\1/p')
    log="\texttt{svn} revision ${rev} \$-\$ ${date}"
  fi
  if [ -d .git ]; then
    log=$(LC_MESSAGES=en git --no-pager log -1 HEAD --date=short --pretty=format:"\texttt{git} commit \texttt{%h} -- %ad")
  fi
  echo "\renewcommand*{\PrelimText}{\small\textnormal{\color{gray}${log}}}"
#+END_SRC
*** Use smart quote when exporting
#+BEGIN_SRC emacs-lisp
  (setq org-export-with-smart-quotes nil)
#+END_SRC

*** Add =cite= link
#+BEGIN_SRC emacs-lisp
(org-add-link-type "cite" 'ebib
 (lambda (path desc format)
   (cond
    ((eq format 'html)  (format "(<cite>%s</cite>)" path))
    ((eq format 'latex) (format "\\cite{%s}" path)))))
#+END_SRC

*** Add =mu4e= link
#+BEGIN_SRC emacs-lisp
(org-add-link-type "mu4e" 'org-mu4e-open
 (lambda (path desc format)
   (cond
    ((eq format 'html)  (format "(<cite>%s</cite>)" path))
    ((eq format 'latex) (format "\\cite{%s}" path)))))
#+END_SRC

*** Keep LaTeX logfiles
#+BEGIN_SRC emacs-lisp
  (setq org-latex-remove-logfiles nil)
#+END_SRC
*** Default list of LaTeX packages
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "org-preamble"))
#+END_SRC

*** Defining org-latex classes
#+BEGIN_SRC emacs-lisp
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
#+END_SRC
**** General article class
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("article"
                 "\\documentclass{article}
                  [NO-DEFAULT-PACKAGES]
                   \\usepackage{libertineotf}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
**** SuperNEMO articles
***** DocDB article
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("snemo-article"
                 "\\documentclass{scrartcl}
                  \\setkomafont{disposition}{\\normalfont\\bfseries}
                  [PACKAGES]
                  \\usepackage{supernemo-article-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
***** Note taking
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("snemo-note"
                 "\\documentclass{scrartcl}
                  [PACKAGES]
                  \\usepackage{supernemo-note-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
***** SN@ilWare markup filter
#+BEGIN_SRC emacs-lisp
  (defun snailware-markup-filter (contents backend info)
     (when (eq backend 'latex)
       (replace-regexp-in-string "SN@ilware" "\\\\Snailware" contents)))
   (add-to-list 'org-export-filter-final-output-functions 'snailware-markup-filter)
#+END_SRC

**** Memoir article
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("memoir-article"
                 "\\documentclass[11pt,oneside,article]{memoir}
                  [PACKAGES]
                  \\usepackage{memoir-article-style}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+END_SRC

**** Beamer template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass[c]{beamer}
                  [PACKAGES]
                  \\usepackage{custom-beamer}
                  [NO-DEFAULT-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
***** *bold* becomes =structure=
We also translate *bold* into beamer =structure=.
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-bold (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\structure" contents)))
  (defun sk-beamer-underline (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
  (defun sk-beamer-strike (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\alert" contents)))

  (add-to-list 'org-export-filter-bold-functions 'sk-beamer-bold)
  (add-to-list 'org-export-filter-underline-functions 'sk-beamer-underline)
  (add-to-list 'org-export-filter-strike-through-functions 'sk-beamer-strike)
#+END_SRC
***** Use =strike= as alert
Change the face of =strike-through=
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (setq org-emphasis-alist
        (cons '("+" '(:inherit org-warning :inherit bold))
              (delete* "+" org-emphasis-alist :key 'car :test 'equal)))
#+END_SRC
***** Add =frame= option to footnote
#+BEGIN_SRC emacs-lisp
  (defun sk-beamer-footnote (contents backend info)
    (when (eq backend 'beamer)
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\footnote[frame]" contents)))
  (add-to-list 'org-export-filter-footnote-reference-functions 'sk-beamer-footnote)
#+END_SRC
***** Add email
#+BEGIN_SRC emacs-lisp :tangle no
  (setq user-mail-address nil)
  (defun sk-beamer-email (options backend)
    "Insert EMAIL as \email{EMAIL} in the latex backend when EMAIL is present."
    (when (and (org-export-derived-backend-p backend 'latex)
               (plist-get options :with-email))
      (plist-put options :latex-header
                 (mapconcat 'identity
                            (remove nil
                                    (list
                                     (plist-get options :latex-header)
                                     (format "\\email{%s}"
                                             (plist-get options :email))))
                            "\n"))
      ;; don't insert email in \thanks{.}
      (plist-put options :with-email nil))
    options)

  (add-to-list 'org-export-filter-options-functions 'sk-beamer-email)
#+END_SRC
***** Colored box environment
We define a new environment for "colored" box
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-beamer-environments-extra
               '("cbox" "c" "\\begin{cbox}%o(%h)" "\\end{cbox}"))
#+END_SRC

***** Empty =outline= title
#+BEGIN_SRC emacs-lisp
  (setq org-beamer-outline-frame-title "")
  (setq org-beamer-outline-frame-options "plain")
#+END_SRC

*** Filters
**** Get headline properties
From Rasmus
#+BEGIN_SRC emacs-lisp
(defun sk-get-org-headline-string-element  (headline backend info)
  "Return the org element representation of an element.  Does not
    work with verbatim only headlines, e.g. \"* ~Verb~.\""
  (let ((prop-point (next-property-change 0 headline)))
    (if prop-point (plist-get (text-properties-at prop-point headline) :parent))))
#+END_SRC
**** Ignore headline
Add a new tag =ignoreheading= to skip headline tagged as such.
#+BEGIN_SRC emacs-lisp
  (defun sk-ignore-headline (backend)
    (when (org-export-derived-backend-p backend 'latex)
      (delete-matching-lines ":ignoreheading:")))
  (add-to-list 'org-export-before-parsing-hook 'sk-ignore-headline)
#+END_SRC

**** Change =table= into =figure= env
When graphics are placed into table cells then change the default table
environment into figure
#+BEGIN_SRC emacs-lisp
  (defun sk-multicolumn-figure (contents backend info)
    (when (and (org-export-derived-backend-p backend 'latex)
               (string-match "table" contents)
               (string-match "includegraphics" contents))
      (replace-regexp-in-string "{table}" "{figure}" contents)))
  (add-to-list 'org-export-filter-table-functions 'sk-multicolumn-figure)
#+END_SRC

**** Lowercase =\begin/\end= environment
#+BEGIN_SRC emacs-lisp
  (defun latex::downcase-begin-filter (contents backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\\\begin{CBOX}"     "\\\\begin{cbox}"
      (replace-regexp-in-string "\\\\begin{QUESTION}" "\\\\begin{question}"
      (replace-regexp-in-string "\\\\begin{REMARK}"   "\\\\begin{remark}"
      (replace-regexp-in-string "\\\\begin{ABSTRACT}" "\\\\begin{abstract}"
                              contents))))))
  (defun latex::downcase-end-filter (contents backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\\\end{CBOX}"     "\\\\end{cbox}"
      (replace-regexp-in-string "\\\\end{QUESTION}" "\\\\end{question}"
      (replace-regexp-in-string "\\\\end{REMARK}"   "\\\\end{remark}"
      (replace-regexp-in-string "\\\\end{ABSTRACT}" "\\\\end{abstract}"
                              contents))))))
  (add-to-list 'org-export-filter-final-output-functions 'latex::downcase-begin-filter)
  (add-to-list 'org-export-filter-final-output-functions 'latex::downcase-end-filter)
#+END_SRC

*** KOMA/LaTeX script
Define a special =org-latex-classes= to make use of KOMA/LaTeX letter
style. The =ox-koma-letter= backend from org-mode contribution directory must
be properly installed or loaded. To produce org-mode to LaTeX to PDF export,
you should use the =org-koma-letter-export-to-pdf= command.

#+BEGIN_SRC emacs-lisp
  (setq org-koma-letter-email  nil)
  (setq org-koma-letter-author nil)
  (setq org-koma-letter-from-address "")
  (add-to-list 'org-latex-classes
               '("koma-letter"
                 "\\documentclass{scrlttr2}
                  [NO-DEFAULT-PACKAGES]"))
#+END_SRC

*** Define =org-latex-pdf-process= command
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process (list "xelatex -shell-escape %f"))
#+END_SRC

*** Add new LATEX_CMD option to choose between =pdflatex= and =xelatex=
From [[http://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export][org-faq]]
#+BEGIN_SRC emacs-lisp
  (defun sk-latexmk-cmd (backend)
    "When exporting from .org with latex, automatically run latex,
       pdflatex, or xelatex as appropriate, using latexmk."
    (when (org-export-derived-backend-p backend 'latex)
      (let ((texcmd)))
      ;; default command: xelatex
      (setq texcmd "jobname=$(basename %f | sed 's/\.tex//');latexmk -xelatex -shell-escape -quiet %f && mkdir -p latex.d && mv ${jobname}.* latex.d/. && mv latex.d/${jobname}.{org,pdf,fdb_latexmk,aux} .")
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdf -shell-escape -quiet %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -xelatex -shell-escape -quiet %f"))
      ;; LaTeX compilation command
      (setq org-latex-pdf-process (list texcmd))))

  (org-add-hook 'org-export-before-processing-hook 'sk-latexmk-cmd)
#+END_SRC

# The pretty long command with symbolic link is because =minted= package does not
# play well with =-output-directoy= option. Even if a homemade version of [[https://github.com/xgarrido/minted][=minted=]]
# try to deal with that problem, there is still one remaining issue (see [[http://tex.stackexchange.com/questions/112953/error-when-using-minted-package-and-output-directory-option][this post
# forum]]). That is the reason for the symbolic link in the =.latex.d= directory.

*** Minted setup
#+BEGIN_SRC emacs-lisp :results silent
  (setq org-latex-listings 'minted)
  (setq org-latex-minted-options
        '(;;("frame" "lines")
          ("fontsize" "\\footnotesize")
          ("mathescape" "")
          ("samepage" "")
          ("xrightmargin" "0.5cm")
          ("xleftmargin"  "0.5cm")
          ))
  (add-to-list 'org-latex-minted-langs '(ipython "python"))
  (add-to-list 'org-latex-minted-langs '(jupyter-python "python"))
#+END_SRC

*** Place table caption below table
#+BEGIN_SRC emacs-lisp
  (setq org-latex-table-caption-above nil)
#+END_SRC

*** Force figure positionning
#+BEGIN_SRC emacs-lisp
  (setq org-latex-default-figure-position "!htb")
#+END_SRC
*** Configuring =org-latex-preview=
- Set the program to create formula (either =dvipng= or =imagemagick=)
#+BEGIN_SRC emacs-lisp
  (setq org-preview-latex-default-process 'dvisvgm)
#+END_SRC

- Set the output directory
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-preview-latex-image-directory "ltximg/")
#+END_SRC

** Other exporters                                               :nottangle:
:PROPERTIES:
:HEADER-ARGS: :tangle no
:END:
*** Org-ioslide
#+BEGIN_SRC emacs-lisp
  (require 'ox-ioslide)
#+END_SRC
*** Org-reveal
[[https://github.com/yjwen/org-reveal/][=org-reveal=]] exports =org= documents to reveal.js presentations.
#+BEGIN_SRC emacs-lisp
  (require 'ox-reveal)
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/2.5.0/")
  (setq org-reveal-hlevel 2)
  (setq org-reveal-control nil)
  ;;(setq org-reveal-theme "solarized")
#+END_SRC
**** Filters
***** Change =pdf= file to =png= image
#+BEGIN_SRC emacs-lisp
  (defun sk-change-pdf-to-png (backend)
    (when (org-export-derived-backend-p backend 'reveal)
      (while (re-search-forward "\\(.pdf\\)" nil t)
        (replace-match ".png"))))

  (add-hook 'org-export-before-parsing-hook 'sk-change-pdf-to-png)
#+END_SRC

** Prevent editing invisible text

The following setting prevents accidentally editing hidden text when
the point is inside a folded region. This can happen if you are in the
body of a heading and globally fold the org-file with =S-TAB=

I find invisible edits (and undo's) hard to deal with so now I can't
edit invisible text. =C-c C-r= (org-reveal) will display where the point
is if it is buried in invisible text to allow editing again.
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

** Org fold to store folding state

Stolen from [[https://github.com/dandavison/org-fold][Dan Davison]] git account. Just changing the directory where
the =.fold= file is saved.
#+BEGIN_SRC emacs-lisp
  (setq org-fold-directory (concat temporary-file-directory "org-fold/"))
  (unless (file-exists-p org-fold-directory)
    (make-directory org-fold-directory))

  (defun org-fold-get-fold-info-file-name ()
    (concat org-fold-directory (buffer-name) ".fold"))

  (defun org-fold-save ()
    (save-excursion
      (goto-char (point-min))
      (let (foldstates)
        (unless (looking-at outline-regexp)
          (outline-next-visible-heading 1))
        (while (not (eobp))
          (push (if (some (lambda (o) (overlay-get o 'invisible))
                          (overlays-at (line-end-position)))
                    t)
                foldstates)
          (outline-next-visible-heading 1))
        (with-temp-file (org-fold-get-fold-info-file-name)
          (prin1 (nreverse foldstates) (current-buffer))))))

  (defun org-fold-restore ()
    (save-excursion
      (goto-char (point-min))
      (let* ((foldfile (org-fold-get-fold-info-file-name))
             (foldstates
              (if (file-readable-p foldfile)
                  (with-temp-buffer
                    (insert-file-contents foldfile)
                    (read (current-buffer))))))
        (when foldstates
          (show-all)
          (goto-char (point-min))
          (unless (looking-at outline-regexp)
            (outline-next-visible-heading 1))
          (while (and foldstates (not (eobp)))
            (if (pop foldstates)
                (hide-subtree))
            (outline-next-visible-heading 1))
          (message "Restored saved folding state")))))

  (add-hook 'org-mode-hook 'org-fold-activate)

  (defun org-fold-activate ()
    (org-fold-restore)
    (add-hook 'before-save-hook 'org-fold-save        nil t)
    (add-hook 'auto-save-hook   'org-fold-kill-buffer nil t))

  (defun org-fold-kill-buffer ()
    ;; don't save folding info for unsaved buffers
    (unless (buffer-modified-p)
      (org-fold-save)))
#+END_SRC

** Functions for =orgtbl=
*** Sending all table

From [[http://article.gmane.org/gmane.emacs.orgmode/64670][Carsten Dominik]]
#+BEGIN_SRC emacs-lisp
  (defun sk-org-send-all-tables ()
     (interactive)
     (org-table-map-tables
        (lambda () (orgtbl-send-table 'maybe))))
#+END_SRC

*** Aligning all table

#+BEGIN_SRC emacs-lisp
  (defun sk-org-align-all-tables ()
    (interactive)
    (org-table-map-tables 'org-table-align 'quietly))
#+END_SRC

** Org capture

Emacs Org-mode has a feature called Org-capture that makes it easy to keep track
of all the to-do's that crop up as we work on projects.  With Org-capture you
can make comments across all your files and projects and link to them all from
one place.
*** Setting the TODO file location
#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "~/Development/github.com/xgarrido/org-notes/misc/todo-list.org")
#+END_SRC

*** Closing items
The most basic logging is to keep track of when a certain TODO item was
finished. This is achieved with
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
** Org calendar                                                  :nottangle:
*** Synchronization with LAL owncloud                           :nottangle:
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-caldav-calendar-id "teaching"
        org-caldav-url "https://owncloud.lal.in2p3.fr/remote.php/caldav/calendars/garrido"
        org-caldav-files '("~/Development/org-caldav/org/teaching.org")
        org-caldav-inbox "~/Development/org-caldav/org/inbox.org")
#+END_SRC

*** Playing with calfw                                          :nottangle:

#+BEGIN_SRC emacs-lisp :tangle no
  (require 'calfw-org)
  (setq calendar-week-start-day 1) ; 0:Sunday, 1:Monday
  (setq org-agenda-files nil)
  (defun my-open-calendar ()
    (interactive)
    (let ((cp (cfw:create-calendar-component-buffer
               :view 'month
               :contents-sources
               (list
                (cfw:org-create-file-source
                 "schedule"
                 "~/Development/org-caldav/org/teaching.org"
                 "#859900")))))
      (switch-to-buffer (cfw:cp-get-buffer cp))))
#+END_SRC

** Rendering =pdf= images
From [[http://stackoverflow.com/questions/15407485/inline-pdf-images-in-org-mode]]
#+BEGIN_SRC emacs-lisp :tangle no
  (setq image-file-name-extensions
        (quote
         ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg" "pdf" "bmp")))

  (setq org-image-actual-width 600)

  (setq org-imagemagick-display-command "convert -density 600 \"%s\" -thumbnail \"%sx%s>\" \"%s\"")
  (defun org-display-inline-images (&optional include-linked refresh beg end)
    "Display inline images.
  Normally only links without a description part are inlined, because this
  is how it will work for export.  When INCLUDE-LINKED is set, also links
  with a description part will be inlined.  This
  can be nice for a quick
  look at those images, but it does not reflect what exported files will look
  like.
  When REFRESH is set, refresh existing images between BEG and END.
  This will create new image displays only if necessary.
  BEG and END default to the buffer boundaries."
    (interactive "P")
    (unless refresh
      (org-remove-inline-images)
      (if (fboundp 'clear-image-cache) (clear-image-cache)))
    (save-excursion
      (save-restriction
        (widen)
        (setq beg (or beg (point-min)) end (or end (point-max)))
        (goto-char beg)
        (let ((re (concat "\\[\\[\\(\\(file:\\)\\|\\([./~]\\)\\)\\([^]\n]+?"
                          (substring (org-image-file-name-regexp) 0 -2)
                          "\\)\\]" (if include-linked "" "\\]")))
              old file ov img)
          (while (re-search-forward re end t)
            (setq old (get-char-property-and-overlay (match-beginning 1)
                                                     'org-image-overlay)
                  file (expand-file-name
                        (concat (or (match-string 3) "") (match-string 4))))
            (when (file-exists-p file)
              (let ((file-thumb (format "%s%s_thumb.png" (file-name-directory file) (file-name-base file))))
                (if (file-exists-p file-thumb)
                    (let ((thumb-time (nth 5 (file-attributes file-thumb 'string)))
                          (file-time (nth 5 (file-attributes file 'string))))
                      (if (time-less-p thumb-time file-time)
                          (shell-command (format org-imagemagick-display-command
                                                 file org-image-actual-width org-image-actual-width file-thumb) nil nil)))
                  (shell-command (format org-imagemagick-display-command
                                         file org-image-actual-width org-image-actual-width file-thumb) nil nil))
                (if (and (car-safe old) refresh)
                    (image-refresh (overlay-get (cdr old) 'display))
                  (setq img (save-match-data (create-image file-thumb)))
                  (when img
                    (setq ov (make-overlay (match-beginning 0) (match-end 0)))
                    (overlay-put ov 'display img)
                    (overlay-put ov 'face 'default)
                    (overlay-put ov 'org-image-overlay t)
                    (overlay-put ov 'modification-hooks
                                 (list 'org-display-inline-remove-overlay))
                    (push ov org-inline-image-overlays))))))))))
#+END_SRC
** Misc.
*** Edit email from thunderbird within emacs
[[http://globs.org/articles.php?pg=2&lng=en][External editor]] allows to edit mail from thunderbird within emacs. Here, we just
set the default writing mode to be =org= for =.eml= files.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.eml\\'" . org-mode))
#+END_SRC
